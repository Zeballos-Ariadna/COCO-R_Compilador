// Set the name of your grammar here (and at the end of this grammar):
COMPILER Xml

// Add auxiliary methods and declaration here.

// If you want your generated compiler case insensitive add the
// keyword IGNORECASE here.

CHARACTERS
// Add character set declarations here.
// Examples:
//   letter = 'A'..'Z' + 'a'..'z'.
//   digit = "0123456789".
//   cr = '\r'.
//   lf = '\n'.
  NameStartChar = ':' + 'A' .. 'Z' + '_' + 'a' .. 'z'.
  NameChar = NameStartChar + '.' + '-' + '0' .. '9'.
  Char = ANY - '-'.
  CharDataChar = ANY - '<' - '>' - '&' - '"' - '\'' - NameStartChar.
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.


TOKENS
// Add token declarations here.
// Example:
//   ident = letter {letter | digit}.
//   number = digit {digit}.
  Name = NameStartChar {NameChar}.
  CharData = CharDataChar {CharDataChar}.
  Comment = "<!--" {Char} "-->".
  XmlStart = "<?xml".
  XmlEnd = "?>".
  Eq = '='.
  Less = '<'.
  Slash = '/'.
  More = '>'.
  Quote = '\''.
  DoubleQuote = '"'.
  AND = '&'.

IGNORE cr + lf + tab

// PRAGMAS
// Add pragma declarations here.
// Example:
//   switch = '$' { digit | letter }. (. Optional semantic action .)

// Add comments here.
// Example for a multi-line block comment:
//   COMMENTS FROM "/*" TO "*/" NESTED
// Example for a single line comment:
//   COMMENTS FROM "//" TO lf

// Set the ignored characters (whitespaces) here, the blank character is
// ignored by default.
// Example, add line breaks to the ignore set.
//   IGNORE cr + lf


PRODUCTIONS
// Add your productions here, one must have the same name as the grammar,
// it will be the start symbol (entry point of your compiler).
// Example:
//   Grammar = "BEGIN" { Statement } "END".
//   Statement = ident "=" number { "+" number } .
// Grammar=.

    Xml =
      Prolog Element {Comment}.

    Prolog =
      XmlStart Attribute [Attribute] XmlEnd.

    Element =
      EmptyElementTag | STag Content ETag.

    STag =
      Less Name {Attribute} More.

    Attribute =
      Name Eq ((Quote {(CharData | Name)} Quote) | (DoubleQuote {(CharData | Name)} DoubleQuote)).

    ETag =
      Less Slash Name More.

    Content =
      {(CharData | Name | More | Quote | DoubleQuote | AND )} {(Element | Comment | {(CharData | Name | More | Quote | DoubleQuote | AND )})}.

    EmptyElementTag =
      Less Name {Attribute} Slash More.

// End of your compiler specification, make sure the name here matches
// the grammar name at the start of this grammar.
END Xml.